{{- $replica_count := .Values.replicaCount | default "1" | toString }}
{{- $registry := .Values.image.cloudflared.registry | default "docker.io" | toString }}
{{- $repository := .Values.image.cloudflared.repository | default "cloudflare/cloudflared" | toString }}
{{- $tag := .Values.image.cloudflared.tag | default .Chart.AppVersion | toString }}
{{- $pullPolicy := .Values.image.cloudflared.pullPolicy | default "IfNotPresent" | toString | quote }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-cloudflared
  labels:
    {{- include "cloudflared.labels" . | nindent 4 }}
spec:
  replicas: {{ int $replica_count }}
  selector:
    matchLabels:
      {{- include "cloudflared.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "cloudflared.selectorLabels" . | nindent 8 }}
    spec:
      containers:
        - name: cloudflared
          image: {{ printf "%s/%s:%s" $registry $repository $tag | quote }}
          imagePullPolicy: {{ $pullPolicy }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          args:
            - tunnel
            # Points cloudflared to the config file, which configures what
            # cloudflared will actually do. This file is created by a ConfigMap
            # below.
            - --config
            - /etc/cloudflared/config/config.yaml
            - run
          livenessProbe:
            httpGet:
              # Cloudflared has a /ready endpoint which returns 200 if and only if
              # it has an active connection to the edge.
              path: /ready
              port: 2000
            failureThreshold: 1
            initialDelaySeconds: 10
            periodSeconds: 10
          volumeMounts:
            - name: {{ .Release.Name }}-cloudflared-config
              mountPath: /etc/cloudflared/config
              readOnly: true
            # Each tunnel has an associated "credentials file" which authorizes machines
            # to run the tunnel. cloudflared will read this file from its local filesystem,
            # and it'll be stored in a k8s secret.
            - name: {{ .Release.Name }}-cloudflared-creds
              mountPath: /etc/cloudflared/creds
              readOnly: true
      volumes:
        - name: {{ .Release.Name }}-cloudflared-creds
          secret:
            # By default, the credentials file will be created under ~/.cloudflared/<tunnel ID>.json
            # when you run `cloudflared tunnel create`. You can move it into a secret by using:
            # ```sh
            # kubectl create secret generic tunnel-credentials \
            # --from-file=credentials.json=/Users/yourusername/.cloudflared/<tunnel ID>.json
            # ```
            secretName: {{ .Release.Name }}-cloudflared-tunnel-creds
        # Create a config.yaml file from the ConfigMap below.
        - name: {{ .Release.Name }}-cloudflared-config
          configMap:
            name: {{ .Release.Name }}-cloudflared-cm
            items:
              - key: config.yaml
                path: config.yaml
