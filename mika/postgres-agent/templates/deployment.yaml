{{- $host := .Values.postgres.host | default "postgres" | toString }}
{{- $registry := .Values.image.postgres.registry | default "docker.io" | toString }}
{{- $repository := .Values.image.postgres.repository | default "bitnami/postgresql" | toString }}
{{- $tag := .Values.image.postgres.tag | default .Chart.AppVersion | toString }}
{{- $pullPolicy := .Values.image.postgres.pullPolicy | default "IfNotPresent" | toString | quote }}
{{- $create_mode := .Values.postgres.mode.create }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ printf "%s-%s-%s" (index (splitList "." $host) 0) .Release.Name "postgres-agent" }}
  labels:
    {{- include "postgres-agent.labels" . | nindent 4 }}
spec:
  ttlSecondsAfterFinished: 120
  backoffLimit: 0
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "postgres-agent.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: postgres-agent
          image: {{ printf "%s/%s:%s" $registry $repository $tag | quote }}
          imagePullPolicy: {{ $pullPolicy }}
          resources:
            {{- toYaml .Values.resources.postgres | nindent 12 }}
          command: ["/bin/bash"]
          args:
            - -c
            - >-
              psql -v ON_ERROR_STOP=1 -h $(DB_HOST) -U $(ROOT_USER) -d postgres <<-EOSQL
                SELECT 'CREATE DATABASE "$(DB_NAME)"' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '$(DB_NAME)')\gexec
                SELECT 'CREATE USER "$(DB_USER)" WITH PASSWORD ''$(DB_PASS)''' WHERE NOT EXISTS (SELECT FROM pg_user WHERE usename = '$(DB_USER)')\gexec
                GRANT ALL PRIVILEGES ON DATABASE "$(DB_NAME)" TO "$(DB_USER)"\gexec
              EOSQL
          {{- else }}
          command: ["/bin/bash"]
          args:
            - -c
            - >-
              psql -v ON_ERROR_STOP=1 -h $(DB_HOST) -U $(ROOT_USER) -d postgres <<-EOSQL
                SELECT 'DROP DATABASE "$(DB_NAME)"' WHERE EXISTS (SELECT FROM pg_database WHERE datname = '$(DB_NAME)')\gexec
                SELECT 'DROP USER "$(DB_USER)"' WHERE EXISTS (SELECT FROM pg_user WHERE usename = '$(DB_USER)')\gexec
              EOSQL
          {{- end }}
          env:
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-postgres-agent-secret
                  key: DB_HOST
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-postgres-agent-secret
                  key: DB_NAME
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-postgres-agent-secret
                  key: DB_USER
            {{- if $create_mode }}
            - name: DB_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-postgres-agent-secret
                  key: DB_PASS
            {{- end }}
            - name: ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-postgres-agent-secret
                  key: ROOT_USER
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-postgres-agent-secret
                  key: ROOT_PASS
      restartPolicy: Never
